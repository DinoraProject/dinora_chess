#!/usr/bin/env python
"""
This program generates TFRecord dataset from pgn file
WARNING: Experimental
"""
from dinora.utils import disable_tensorflow_log

disable_tensorflow_log()

import argparse
import numpy as np
import tensorflow as tf
from dinora.preprocess_pgn import chess_positions, load_chess_games
from tensorflow.python.ops.numpy_ops import np_config

np_config.enable_numpy_behavior()

from tensorflow import keras
from dinora.model import build_model, LightConfig


def float_feature(value):
    return tf.train.Feature(float_list=tf.train.FloatList(value=value))


def create_example(planes, policy, result):
    feature = {
        "planes": float_feature(planes.reshape(18 * 8 * 8)),
        "policy": float_feature(policy),
        "result": float_feature([result]),
    }
    return tf.train.Example(features=tf.train.Features(feature=feature))


games = load_chess_games("pgn/mygames.pgn", 1000)

with tf.io.TFRecordWriter("some.tfrec", "GZIP") as writer:
    print("TFRecord with")
    for planes, (policy, result) in chess_positions(games):
        example = create_example(planes, policy, result)
        writer.write(example.SerializeToString())

exit()


def parse_tfrecord_fn(example):
    feature_description = {
        "planes": tf.io.VarLenFeature(tf.float32),
        "policy": tf.io.VarLenFeature(tf.float32),
        "result": tf.io.FixedLenFeature([], tf.float32),
    }
    example = tf.io.parse_single_example(example, feature_description)

    planes = tf.sparse.to_dense(example["planes"])
    policy = tf.sparse.to_dense(example["policy"])
    result = example["result"]

    return planes.reshape((18, 8, 8)), (policy, result)


raw_dataset = tf.data.TFRecordDataset("some.tfrec")
parsed_dataset = raw_dataset.map(parse_tfrecord_fn).batch(128)

for features in parsed_dataset.take(1):
    planes, (policy, result) = features
    print(planes)
    print(policy)
    print(result)


model = build_model(LightConfig)
model.compile(
    keras.optimizers.Adam(),
    loss=["categorical_crossentropy", "mean_squared_error"],
    metrics=["accuracy"],
)

print("Start fit")
model.fit(parsed_dataset, epochs=1)
