#!/usr/bin/env python
"""Start supervised training from PGN file or saved dataset"""
from dinora.utils import disable_tensorflow_log

disable_tensorflow_log()

import datetime
import argparse

from tensorflow import keras
import tensorflow as tf
from dinora.model import build_model, LightConfig
from dinora.dataset import create_dataset_from_pgn


parser = argparse.ArgumentParser(description="This program starts supervised training")
parser.add_argument("pgn_path")
parser.add_argument("max_games", type=int)
parser.add_argument("hours", type=int)

args = parser.parse_args()


model = build_model(LightConfig)
model.compile(
    keras.optimizers.Adam(),
    loss=["categorical_crossentropy", "mean_squared_error"],
    metrics=["accuracy"],
)


class TimeCallback(keras.callbacks.Callback):
    """Stop model training after <hours>"""

    def __init__(self, hours):
        self.endtime = datetime.datetime.now() + datetime.timedelta(hours=hours)

    def on_train_batch_begin(self, batch, logs=None):
        if datetime.datetime.now() > self.endtime:
            self.model.stop_training = True
            self.model.save("keras_model.h5")
            print("Model stopped early by TimeCallback")
            import os  # FIXME after model training is stopped, Python interpreter still running

            os._exit(
                0
            )  # Something wrong with dataset.prefetch, without it, the interpreter stops correctly


# TODO from saved dataset
# dataset = tf.data.experimental.load('newset', compression='GZIP')
# dataset = dataset.batch(512)


dataset = create_dataset_from_pgn(args.pgn_path, args.max_games)
dataset = dataset.batch(512).prefetch(tf.data.AUTOTUNE)

model.fit(dataset, epochs=1, callbacks=[TimeCallback(args.hours)])
print("Complete")
