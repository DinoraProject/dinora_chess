#!/usr/bin/env python
"""Bench evaluate speed"""
from dinora.utils import disable_tensorflow_log

disable_tensorflow_log()

import sys
from pathlib import Path
import time

import numpy as np

sys.path.append(str(Path(__file__).parent.parent))

import argparse
from dinora.preprocess_pgn import load_chess_games
from dinora.net import ChessModel, ChessModelWithCache

parser = argparse.ArgumentParser(description="Bench evaluate speed")
parser.add_argument("pgn_path")
parser.add_argument("max_moves", type=int)
parser.add_argument("-m", "--model_path", default="models/latest.h5")

args = parser.parse_args()

print(args.pgn_path)


def get_boards(games):
    for game in games:
        board = game.board()

        for move in game.mainline_moves():
            yield board

            try:
                board.push(move)
            except AssertionError:
                pass


# model = ChessModel(args.model_path)
model = ChessModelWithCache()

########################### MODEL EVALUATE SEQ
games = load_chess_games(args.pgn_path, 99999)
start = time.perf_counter()
for board, i in zip(get_boards(games), range(args.max_moves)):
    print(i, model.evaluate(board, 2.0)[1])

dt = time.perf_counter() - start
boards = i + 1

########################### MODEL MODEL MINIBATCH
# from itertools import islice

# minibatch_n = 1

# games = load_chess_games(args.pgn_path, 99999)
# start = time.perf_counter()

# boards = list(islice(get_boards(games), minibatch_n * args.max_moves))
# for i in range(minibatch_n):
#     minibatch = []
#     for j in range(args.max_moves):
#         board = boards[i * args.max_moves + j]
#         plane = canon_input_planes(board.fen(), False)
#         minibatch.append(plane)

#     minibatch = np.array(minibatch)
#     out = model.model(minibatch, training=False)
#     policy, value = out
#     for v in value:
#         print(float(v))

# dt = time.perf_counter() - start
# boards = minibatch_n * args.max_moves

############################ CANON INPUT PLANES

# games = load_chess_games(args.pgn_path, 99999)
# start = time.perf_counter()
# for board, i in zip(get_boards(games), range(args.max_moves)):
#     plane = canon_input_planes(board.fen(), True)

# dt = time.perf_counter() - start
# boards = i + 1

print("\n\n\n-----REPORT-----")
print(f"Tested Model: {args.model_path}")
print(f"Total time: {dt}")
print(f"Total boards: {boards}")
print(f"Boards per seconds: {boards / dt}")
